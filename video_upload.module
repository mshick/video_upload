<?php

// $Id: video_upload.module,v 1.23.2.7.2.10 2010/05/19 20:22:28 jhedstrom Exp $

/**
 * @file
 *   video upload module
 * @todo
 *   See TODO.txt, and inline todo comments
 */

// Load the include for Insert module
if (module_exists('insert')) {
  module_load_include('inc', 'video_upload', 'video_upload.insert');
}


/**
 * Video status levels.
 */
define('VIDEO_UPLOAD_STATUS_ORPHANED', 'orphaned');
define('VIDEO_UPLOAD_STATUS_DELETE', 'delete');
define('VIDEO_UPLOAD_STATUS_BAD', 'bad');
define('VIDEO_UPLOAD_STATUS_UNKNOWN', 'unknown');
define('VIDEO_UPLOAD_STATUS_OK', 'ok');
define('VIDEO_UPLOAD_STATUS_OK_SYNCED', 'synced');
define('VIDEO_UPLOAD_STATUS_UPLOAD_PENDING', 'upload_pending');
define('VIDEO_UPLOAD_STATUS_STILLFRAME', 'stillframe');

/**
 * Video synchronization.
 */
define('VIDEO_UPLOAD_SYNC_NONE', 0);
define('VIDEO_UPLOAD_SYNC', 1);
define('VIDEO_UPLOAD_SYNC_APPEND', 2);

/**
 * Implementation of hook_init().
 */
function video_upload_init() {
  module_load_include('inc', 'video_upload', 'video_upload_widget');
  module_load_include('inc', 'video_upload', 'video_upload.browser');
}

/**
 * Implementation of hook_theme().
 */
function video_upload_theme() {
  $theme = array(
    'video_upload_video' => array(
      'arguments' => array('video_id' => NULL, 'width' => '425', 'height' => '355', 'field' => array(), 'params' => array(), 'attributes' => array()),
    ),
    'video_upload_video_link' => array(
      'arguments' => array('item' => NULL),
    ),
    'video_upload_video_player' => array(
      'arguments' => array('item' => NULL),
    ),    
    'video_upload_video_stillframe' => array(
      'arguments' => array('item' => NULL, 'provider' => NULL),
    ),
    'video_upload_video_thumb' => array(
      'arguments' => array('field' => NULL, 'item' => NULL, 'node' => NULL, 'as_link' => FALSE),
    ),
    'video_upload_video_status_message' => array(
      'arguments' => array('item' => NULL, 'message' => NULL),
    ),
    'video_upload_admin_video_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'video_upload_status_text' => array(
      'arguments' => array('status' => NULL),
    ),
    'video_upload_missing_image' => array(
      'arguments' => array('style' => 'full', 'width' => 425, 'height' => 355, 'attributes' => array()),
    ),

    // video_upload_widget form element type theme function.
    'video_upload_widget' => array(
      'arguments' => array('element' => NULL),
      'file' => 'video_upload_widget.inc',
    ),
    'video_upload_widget_preview' => array(
      'arguments' => array('item' => NULL),
      'file' => 'video_upload_widget.inc',
    ),
    'video_upload_browser_method_widget' => array(
      'arguments' => array('element' => NULL),
      'file' => 'video_upload.browser.inc',
    ),
    'video_upload_browser_method_widget_item' => array(
      'arguments' => array('element' => NULL),
      'file' => 'video_upload.browser.inc',
    ),    
    'video_upload_browser_method_widget_preview' => array(
      'arguments' => array('item' => NULL, 'element_id' => NULL, 'field' => NULL),
      'file' => 'video_upload.browser.inc',
    ),
    'video_upload_browser_method_widget_file' => array(
      'arguments' => array('element' => NULL),
      'file' => 'video_upload.browser.inc',
    ),
    'video_upload_browser_method_widget_notice' => array(
      'arguments' => array('element' => NULL),
      'file' => 'video_upload.browser.inc',
    ),         
    'insert_video_upload' => array(
      'arguments' => array('item' => NULL, 'widget' => NULL, 'provider' => NULL),
      'template' => 'templates/insert-video-upload',
      'pattern' => 'insert_video_upload__[a-z0-9_]+',
      'file' => 'includes/video_upload.theme.inc',   
    ),       
  );

  // CCK formatters.
  $formatters = array(
    'video_upload_formatter_default',
    'video_upload_formatter_thumb',
    'video_upload_formatter_thumb_link',
    'video_upload_formatter_small',
  );

  foreach ($formatters as $formatter) {
    $theme[$formatter] = array(
      'arguments' => array('element' => NULL),
    );
  }

  foreach ($theme as $function => $data) {
    if (!isset($theme[$function]['file'])) {
      $theme[$function]['file'] = 'video_upload.theme.inc';
    }
  }

  return $theme;
}

/**
 * Implementation of hook_perm().
 */
function video_upload_perm() {
  return array('administer video upload settings', 'administer uploaded videos');
}


/**
 * Implementation of hook_menu().
 */
function video_upload_menu() {
  $items['admin/settings/video-upload'] = array(
    'title' => 'Video Upload Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_video_upload_admin_settings_form'),
    'access arguments' => array('administer video upload settings'),
    'file' => 'video_upload.admin.inc',
    'description' => 'Video provider settings for the <em>Video Upload</em> module.',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/video-upload/list'] = array(
    'title' => 'General Settings',
    'access arguments' => array('administer video upload settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Admin page for removing stranded videos (not attached to a node).
  $items['admin/content/video-upload'] = array(
    'title' => 'Video uploads',
    'page callback' => 'video_upload_admin_overview',
    'access arguments' => array('administer uploaded videos'),
    'file' => 'video_upload.admin.inc',
    'description' => 'Manage all uploaded videos.',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/content/video-upload/list'] = array(
    'title' => 'General Content',
    'access arguments' => array('administer uploaded videos'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Loop through providers to generate menu items for each
  foreach (_video_upload_get_provider_info() as $provider => $info) {
    // Admin page for removing stranded videos (not attached to a node).
    $items['admin/content/video-upload/' . $provider] = array(
      'title' => t('@title', array('@title' => $info['name'])),
      'page callback' => 'video_upload_admin_video',
      'page arguments' => array(3),
      'access arguments' => array('administer uploaded videos'),
      'file' => 'video_upload.admin.inc',
      'description' => t('@description Uploads', array('@description' => $info['description'])),
    );
  }
  
  // Browser method callbacks
  $items['video-upload/dialog/%/%/%/%/%'] = array(
    'title' => 'Get the form for the browser upload dialog',
    'page callback' => 'video_upload_browser_method_dialog',
    'page arguments' => array(2, 3, 4, 5, 6),
    'access arguments' => array('access content'),
    'file' => 'video_upload.browser.inc',
    'type' => MENU_CALLBACK,
  );
    
  $items['video-upload/success/%'] = array(
    'title' => 'Browser Upload final callback',
    'page callback' => 'video_upload_browser_method_success',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'video_upload.browser.inc',
    'type' => MENU_CALLBACK,
  );
  $items['video-upload/attach'] = array(
    'title' => 'Node attach callback',
    'page callback' => 'video_upload_node_attach_ahah',
    'access arguments' => array('access content'),
    'file' => 'video_upload.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['video-upload/create'] = array(
    'title' => 'Node create callback',
    'page callback' => 'video_upload_node_create_ahah',
    'access arguments' => array('access content'),
    'file' => 'video_upload.admin.inc',
    'type' => MENU_CALLBACK,
  );  
  $items['video-upload/progress/%/%'] = array(
    'page callback' => 'video_upload_browser_method_progress',
    'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    'file' => 'video_upload.browser.inc',    
    'type' => MENU_CALLBACK,
  );
  $items['video-upload/preview/%/%'] = array(
    'page callback' => 'video_upload_preview_ajax',
    'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    'file' => 'video_upload.admin.inc',    
    'type' => MENU_CALLBACK,
  );    
  return $items;
}

/**
 * A hook for video providers to set info
 * @return array containing name and description
 */
function _video_upload_get_provider_info(){
  return module_invoke_all('video_upload_provider_info', 'info');
}


/**
 * Implementation of hook_elements().
 */
function video_upload_elements() {
  $elements = array();

  // Uses filefield as a starting point, and adds additional processing.
  $filefield_elements = filefield_elements();

  // Unset FileField's validate callback since it will fail to
  // validate as FileField knows nothing of this file.
  $filefield_elements['filefield_widget']['#element_validate'] = array();

  $elements['video_upload_widget'] = $filefield_elements['filefield_widget'];
  $elements['video_upload_widget']['#process'][] = 'video_upload_widget_process';
  $elements['video_upload_widget']['#element_validate'][] = 'video_upload_widget_validate';

  // Video upload contains additional file meta-data, so requires a separate
  // value callback.
  $elements['video_upload_widget']['#value_callback'] = 'video_upload_widget_value';
  
  $elements['video_upload_browser_method_widget'] = array(
    '#input' => TRUE,
    '#process' => array('video_upload_browser_method_widget_process'),
    '#value_callback' => 'video_upload_browser_method_widget_value',
  );

  return $elements;
}

/**
 * Implementation of hook_file_references().
 */

function video_upload_file_references($file) {
  $count = video_upload_get_file_reference_count($file);
  return $count ? array('video_upload' => $count) : NULL;
}


/**
 * Count the number of times the file is referenced within a field.
 *
 * @param $file
 *   A file object.
 * @param $field
 *   Optional. The CCK field array or field name as a string.
 * @return
 *   An integer value.
 */
function video_upload_get_file_reference_count($file, $field = NULL) {
  $fields = video_upload_get_field_list(NULL, $field);
  $file = (object) $file;

  $references = 0;
  foreach ($fields as $field) {
    $db_info = content_database_info($field);
    $references += db_result(db_query(
      'SELECT count('. $db_info['columns']['fid']['column'] .')
        FROM {'. $db_info['table'] .'}
        WHERE '. $db_info['columns']['fid']['column'] .' = %d', $file->fid
    ));

    // If a field_name is present in the file object, the file is being deleted
    // from this field.
    if (isset($file->field_name) && $field['field_name'] == $file->field_name) {
      // If deleting the entire node, count how many references to decrement.
      if (isset($file->delete_nid)) {
        $node_references = db_result(db_query(
          'SELECT count('. $db_info['columns']['fid']['column'] .')
            FROM {'. $db_info['table'] .'}
            WHERE '. $db_info['columns']['fid']['column'] .' = %d AND nid = %d', $file->fid, $file->delete_nid
        ));
        $references = $references - $node_references;
      }
      else {
        $references = $references - 1;
      }
    }
  }

  return $references;
}

/**
 * Return an array of file fields within a node type or by field name.
 *
 * @param $field
 *   Optional. May be either a field array or a field name.
 * @param $node_type
 *   Optional. The node type to filter the list of fields.
 */
function video_upload_get_field_list($node_type = NULL, $field = NULL) {
  // Build the list of fields to be used for retrieval.
  if (isset($field)) {
    if (is_string($field)) {
      $field = content_fields($field, $node_type);
    }
    $fields = array($field['field_name'] => $field);
  }
  elseif (isset($node_type)) {
    $type = content_types($node_type);
    $fields = $type['fields'];
  }
  else {
    $fields = content_fields();
  }

  // Filter down the list just to file fields.
  foreach ($fields as $key => $field) {
    if ($field['type'] != 'video_upload') {
      unset($fields[$key]);
    }
  }

  return $fields;
}

/**
 * Implementation of CCK's hook_field_info().
 */
function video_upload_field_info() {
  return array(
    'video_upload' => array(
      'label' => 'Video Upload',
      'description' => t('Upload and send video to a 3rd-party provider.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function video_upload_field_settings($op, $field) {
  // Use FileField as a starting point, modify below depending on the operation.
  $return = filefield_field_settings($op, $field);
  switch ($op) {
    case 'database columns':
      $return += array(
        // The provider ID.
        'video_id' => array(
          'type' => 'varchar',
          'length' => 32,
          'views' => TRUE,
        ),
        // Video status.
        'video_status' => array(
          'type' => 'varchar',
          'length' => 32,
          'sortable' => TRUE,
          'views' => TRUE,
        ),
        // Time of status update.
        'video_status_ts' => array(
          'type' => 'int',
          'sortable' => TRUE,
          'default' => 0,
          'views' => TRUE,
        ),
        // Video provider.
        'video_provider' => array(
          'type' => 'varchar',
          'length' => 32,
          'default' => $field['widget']['provider']['type'],
          'views' => TRUE,
        ),
      );
      break;

    case 'views data':
      $table_alias = content_views_tablename($field);
      $field_name = $field['field_name'];
      // Unset FileField data element
      unset($return[$table_alias][$field_name . '_data']);

      // Video status.
      $return[$table_alias][$field_name . '_video_status']['title'] = t('(@field) Video Upload Status', array('@field' => $field_name));
      $return[$table_alias][$field_name . '_video_status']['filter']['handler'] = 'views_handler_filter_video_upload_status';
      $return[$table_alias][$field_name . '_video_status']['field']['handler'] = 'views_handler_field';

      // Video status timestamp.
      $return[$table_alias][$field_name . '_video_status_ts']['title'] = t('(@field) Video Upload Status Timestamp', array('@field' => $field_name));
      $return[$table_alias][$field_name . '_video_status_ts']['filter']['handler'] = 'views_handler_filter_date';
      $return[$table_alias][$field_name . '_video_status_ts']['field']['handler'] = 'views_handler_field_date';
      break;
    
    case 'form':
      // A custom title element option
      $form['title_field'] = array(
        '#type' => 'radios',
        '#title' => t('Title field'),
        '#default_value' => $field['title_field'] === '' ? 0 : (int) $field['title_field'],
        '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
        '#description' => t('When enabled, will display a text field where users may enter a custom title for the uploaded video.'),);

      // Add this as a nodereference referencable type, for optional orphan attachment
      $referencable_types = is_array($field['referenceable_types']) ? $field['referenceable_types'] : array();
      $type_name = $field['type_name'];
      $referencable_types[$type_name] = $type_name;
      $form['referenceable_types'] = array(
        '#type' => 'checkboxes',
        '#default_value' => $referencable_types,
        '#options' => array_map('check_plain', $referencable_types),
        '#weight' => 100,
        '#description' => t('When enabled, will allow this content type to be searched for orphaned video attachments.'),
        '#prefix' => '<div style="display:none;">',
        '#suffix' => '</div>',
      );

      
      $return = array_merge($form, $return);
      break;

    case 'save':
      // Saving the custom field element
      $return[] = 'title_field';
      $return[] = 'referenceable_types';      
      break;
  }
  return $return;
}

/**
 * Implementation of CCK's hook_field().
 */
function video_upload_field($op, $node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'load':
      $items = _video_upload_field_load($node, $field, $items);
      return array($field['field_name'] => $items);
    
    case 'sanitize':
      $items = _video_upload_field_sanitize($node, $field, $items);
      break;   
  
    case 'update':
    case 'insert':
      $items = _video_upload_field_update($node, $field, $items);
      break;

    case 'delete':
      return _video_upload_field_delete($node, $field, $items);
      break;
    
    default:
      return filefield_field($op, $node, $field, $items, $teaser, $page);
  }
}

function _video_upload_field_load($node, $field, $items) {
  // Nothing different from FileField, so simply do what FileField does.
  if (empty($items)) {
    return array();
  }
  foreach ($items as $delta => $item) {
    // If we have a file id AND we are unable to load it, set to NULL.
    if (!empty($item['fid']) && !$file = field_file_load($item['fid'])) {
      $items[$delta] = NULL;
    }
    else {
      $item['data'] = unserialize($item['data']);
      // Temporary fix to unserialize data serialized multiple times.
      // See the FileField issue http://drupal.org/node/402860.
      // And the CCK issue http://drupal.org/node/407446.
      while (!empty($item['data']) && is_string($item['data'])) {
        $item['data'] = unserialize($item['data']);
      }
      if (!empty($item['fid'])) {
        $items[$delta] = array_merge($item, $file);
      }
      else {
        // create a filepath for compatibility with other modules
        $item['filepath'] = theme('video_upload_video_player', $item);
        $items[$delta] = $item;
      }
    }      
  }
  
  return $items;
}

function _video_upload_field_sanitize($node, $field, $items) {
  foreach ($items as $delta => $item) {
    if (!empty($item['fid']) && empty($item['filepath'])) {
      $items[$delta] = array_merge($item, field_file_load($item['fid']));
    }
    $items[$delta]['nid'] = $node->nid;

    // Get the 'data' column stored by CCK into an array. This is necessary
    // for Views, which doesn't call the "load" $op and to fix an issue with
    // CCK double-serializing data.
    // See the FileField issue http://drupal.org/node/402860.
    // And the CCK issue http://drupal.org/node/407446.
    while (!empty($items[$delta]['data']) && is_string($items[$delta]['data'])) {
      $items[$delta]['data'] = unserialize($items[$delta]['data']);
    }

    // Verify the file exists on the server
    if (!empty($item['filepath']) && !strpos($item['filepath'], 'ttp://')) {
      if (!file_exists($items['filepath']))
        watchdog('video_upload', 'Video Upload was trying to load a file %file that doesn\'t exist.' , array('%file' => $item['filepath']));
    }
  }

  return $items;
}

function _video_upload_field_update($node, $field, $items) {
  // Accumulator to gather current fid to compare with the original node
  // for deleting replaced files.
  $curfids = array();
  foreach ($items as $delta => $item) {
    if ($item['video_status'] === VIDEO_UPLOAD_STATUS_DELETE && $field['widget']['remove_deleted_videos'] == false) {
      // Remove items from the array if they have been deleted and we're done with them.
      $items[$delta] = NULL;
    }

    // If this is a new node there are no old items to worry about.
    if (($node->is_new || $node->video_upload_processed)) {
      return $items;
    }

    // Grab original node for comparison
    $orig = node_load($node->nid); 

    $field_name = $field['field_name'];
    // Set status flag if node edits have occurred
    // @todo this should check for changes in any synced record (tags)
    if (   $node->title != $orig->title 
        || $node->body != $orig->body 
        || $node->status != $orig->status 
        || $node->{$field_name}[$delta]['data']['title'] != $orig->{$field_name}[$delta]['data']['title'] 
        || $node->{$field_name}[$delta]['data']['description'] != $orig->{$field_name}[$delta]['data']['description'] 
        || $items[$delta]['stillframe']) {
      // We should only be updating videos that are synced or we could cause trouble
      if ($items[$delta]['video_status'] == VIDEO_UPLOAD_STATUS_OK_SYNCED) {
        // Set video status back to 'ok'
        $items[$delta]['video_status'] = VIDEO_UPLOAD_STATUS_OK;
      }
      if ($items[$delta]['stillframe'] && $items[$delta]['video_status'] == VIDEO_UPLOAD_STATUS_OK) {
        // If we're triggering a stillframe update, set the status flag
        $items[$delta]['video_status'] = VIDEO_UPLOAD_STATUS_STILLFRAME;
      }
    }

    if (!empty($item['fid'])) {
      $items[$delta] = field_file_save($node, $item);
      // Remove items from the array if they have been deleted.
      if (empty($items[$delta])) {
        $items[$delta] = NULL;
      }
      else {
        $curfids[] = $items[$delta]['fid'];
      }
    }
    
    // On new revisions, old files are always maintained in the previous revision.
    // If the node has changed we need to operate on every video      
    if (!empty($node->revision)) {
      return $items;
    }
    
    // Delete items from original node.
    // If there are, figure out which ones must go.
    if (!empty($orig->$field['field_name'])) {
      foreach ($orig->$field['field_name'] as $oitem) {
        if (isset($oitem['fid']) && !in_array($oitem['fid'], $curfids)) {
          // For hook_file_references, remember that this is being deleted.
          $oitem['field_name'] = $field['field_name'];
          filefield_field_delete_file($oitem, $field); 
        }
      }
    }
  }
  
  return $items;
}

function _video_upload_field_delete($node, $field, $items) {
  if ($field['widget']['remove_deleted_videos']) {
    foreach ($items as $delta => $item) {
      $provider = $item['video_provider'];
      $video_id = $item['video_id'];
      $connection = _video_upload_connect(TRUE, $provider);
      $video = _video_upload_get_video_object($connection, $video_id, $provider);
      if ($video) {
        drupal_set_message(t('Video %id has been removed from %provider', array('%id' => $video_id, '%provider' => $provider)));
        return _video_upload_delete_video_remote($connection, $video, $provider);
      }
    }
  }
}

/**
 * Implementation of hook_widget_info().
 */
function video_upload_widget_info() {
  return module_invoke_all('video_upload_provider_info', 'widget');
}

/**
 * Implementation of hook_widget_settings().
 *
 * Filefield will call video_upload_widget_settings().
 */
function video_upload_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
    case 'save':
      $function = 'video_upload_widget_settings_' . $op;
      return $function($widget);
  }
}

/**
 * Implementation of hook_widget().
 */
function video_upload_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // CCK doesn't give a validate callback at the field level...
  // FAPI's #require is naive to complex structures...
  // Filefield's validation ignores our fields...
  // So, we validate at the field level ourselves.
  if (empty($form['#validate']) || !in_array('video_upload_node_form_validate', $form['#validate'])) {
    $form['#validate'][] = 'video_upload_node_form_validate';
  }
  
  $field_name = $field['field_name'];
  if(isset($_GET[$field_name])) {
    _video_upload_video_attach($field, $items);
  }

  if (empty($items[$delta])) {
    $items[$delta] = array(
      'video_id' => FALSE,
      'video_status' => VIDEO_UPLOAD_STATUS_UPLOAD_PENDING,
      'video_status_ts' => $_SERVER['REQUEST_TIME'],
      'video_provider' => $field['widget']['provider']['type'],     
    );
  }

  // global JS settings
  $settings = array(
    'video_upload' => array(
      'ahah' => array(),
    ),
  );

  drupal_add_js($settings, 'setting');
  
  if ($field['widget']['use_browser_upload_method']) {
    // The browser upload method is sufficiently different from direct upload
    // that it warrants entirely separate logic.
    module_load_include('browser.inc', 'video_upload');
    return _video_upload_browser_method_widget($form, $form_state, $field, $items, $delta);
  }

  $element = filefield_widget($form, $form_state, $field, $items, $delta);
  
  // Need to explicitly set this, since it defaults to field type
  $element['#type'] = 'video_upload_widget';
  
  return $element;
}

function _video_upload_video_attach($field, &$items) {
  // @todo need to handle cases other than multiple / unlimited

  if ($field['multiple'] == 0 && !empty($items[0]['video_id'])) {
    drupal_set_message(t('To attach a video to this node you must first remove the existing video.'), 'warning');
    return;
  }

  $field_name = $field['field_name'];

  // if attaching a video from the video admin page
  // checks if the field is correct, then get the videos from the URL
  foreach ($_GET[$field_name] as $video_id => $status) {
    $item['video_id'] = $video_id;
    $item['video_status'] = $status;
    $item['video_status_ts'] = $_SERVER['REQUEST_TIME'];
    $item['video_provider'] = $field['widget']['provider']['type'];

    if ($field['multiple'] == 0) {
      $items[0] = $item;  
    }
    else {
      $items[] = $item;    
    }
  }
}

/**
 * Additional #validate handler for the node form.
 *
 * This function checks the #required properties on video_upload fields.
 */
function video_upload_node_form_validate($form, &$form_state) {
  $type = content_types($form['type']['#value']);
  foreach ($type['fields'] as $field_name => $field) {
    if ($field['module'] != 'video_upload') continue;
    $empty = $field['module'] .'_content_is_empty';
    $valid = FALSE;
    if (!empty($form_state['values'][$field_name])) {
      foreach ($form_state['values'][$field_name] as $delta => $item) {
        if ($empty($item, $field)) continue;
        $valid = TRUE;
      }
    }

    if (!$valid && $field['required']) {
      form_set_error($field_name, t('%title field is required.', array('%title' => $field['widget']['label'])));
    }
  }
}

/**
 * Implementation of CCK's hook_content_is_empty().
 */
function video_upload_content_is_empty($item, $field) {
  // Use FileField's definition of empty and our own video_upload logic.
  return filefield_content_is_empty($item, $field) && empty($item['video_id']);
}

/**
 * Implementation of hook_formatter_info().
 */
function video_upload_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('video_upload'),
      'description' => t('Displays fullsize video as defined in the field settings.'),
    ),
    'thumb' => array(
      'label' => t('Thumbnail image'),
      'field types' => array('video_upload'),
      'description' => t('Image thumbnail of the dimensions defined in the field settings.'),
    ),
    'thumb_link' => array(
      'label' => t('Thumbnail image as link to node'),
      'field types' => array('video_upload'),
      'description' => t('Thumbnail image linking to video node.'),
    ),
    'small' => array(
      'label' => t('Small Video'),
      'field types' => array('video_upload'),
      'description' => t('Small video as defined in the field settings.'),
    ),
  );
}

/**
 * Sets a default title for uploaded video.
 */
function _video_upload_set_default_title($node, $field, $delta = 0, $provider = false) {
  $title = '';

  $field_name = $field['field_name'];
  $custom_title = !empty($field['title_field']) ? true : false;
  
  $widget = $field['widget'];
  $title_sync = $widget['default_title_sync'];

  // For browser upload method, $node object may be empty.
  if (!isset($node->title)) {
    $title_sync = VIDEO_UPLOAD_SYNC_NONE;
  }

  switch ($title_sync) {
    case VIDEO_UPLOAD_SYNC_APPEND :
      $title = $widget['default_title'];
      if ($node->title) {
        $title .= ': ';
      }
      // Fall through to append.
    case VIDEO_UPLOAD_SYNC :
      if($custom_title && $node->{$field_name}[(int)$delta]['data']['title']) {
        $title = $title . $node->{$field_name}[(int)$delta]['data']['title'];
        break;        
      }
      if ($node->title) {
        $title = $title . $node->title;
        break;
      }
    case VIDEO_UPLOAD_SYNC_NONE :
    default :
      $title = $widget['default_title']
        ? $widget['default_title']
        : t('Video from @site_name', array('@site_name' => variable_get('site_name', 'Drupal')));
  }

  if (module_exists('token')) {
    global $user;
    $title = token_replace($title);
    $title = token_replace($title, 'user', $user);
    $title = token_replace($title, 'node', $node);
  }

  // Can't be blank.
  if (!trim($title)) {
    $title = t('Placeholder Title');
  }

  // Hook to provider for title processing
  $title = $provider ? module_invoke('video_upload_provider_' . $provider, 'process', 'title', $title) : $title;

  return $title;
}

/**
 * Sets a default description for uploaded video.
 * @TODO: site admins need to have more control over this (eg, some may
 *        prefer that the site description goes up with the video, rather than
 *        user-entered data.
 */
function _video_upload_set_default_description($node, $field, $delta = 0, $provider = false) {
  $field_name = $field['field_name'];
  $widget = $field['widget'];

  $description_sync = $widget['default_description_sync'];
  $custom_description = !empty($field['description_field']) ? true : false;

  // For browser upload method, $node may be empty.
  if (!isset($node->teaser)) {
    $description_sync = VIDEO_UPLOAD_SYNC_NONE;
  }

  // Set description to teaser.
  switch ($description_sync) {
    case VIDEO_UPLOAD_SYNC_APPEND :
      $description = $widget['default_description'] . "\n\n";
      // Fall through to add teaser.
    case VIDEO_UPLOAD_SYNC :
      if($custom_description && $node->{$field_name}[(int)$delta]['data']['description']) {
        $description = $description . $node->{$field_name}[(int)$delta]['data']['description'];
        break;        
      }    
      if ($node->teaser) {
        $description = $description . $node->teaser;
        break;
      }
      // Otherwise, fall through.
    case VIDEO_UPLOAD_SYNC_NONE :
      $description = $widget['default_description'];

  }

  if (module_exists('token')) {
    global $user;
    $description = token_replace($description);
    $description = token_replace($description, 'user', $user);
    $description = token_replace($description, 'node', $node);
  }

  if (!trim($description)) {
    $description = t('Video uploaded from @site_name : @site_slogan', array('@site_name' => variable_get('site_name', 'Drupal'), '@site_slogan' => variable_get('site_slogan', FALSE)));

    if (module_exists('token')) {
      global $user;
      $description = token_replace($description, 'user', $user);
    }
  }

  // Hook to provider for description processing
  $description = $provider ? module_invoke('video_upload_provider_' . $provider, 'process', 'description', $description) : $description;

  return $description;
}

/**
 * Set keywords by attempting to use taxonomy.
 *
 * @param object $node
 *   A Drupal node object.
 * @param array $widget
 *   CCK widget definition
 * @return mixed
 *   provider defined keywords
 */
function _video_upload_get_video_keywords($node = false, $field, $provider = false) {
  $widget = $field['widget'];
  $video_taxonomy = _video_upload_get_formatted_taxonomy($node);
  $default_keywords = array();
  if (!empty($widget['default_keywords'])) {
    $default_keywords = $widget['default_keywords'];
    $default_keywords = explode(',', $default_keywords);
    foreach ($default_keywords as &$term) {
      $term = trim($term);
    }
  }
  switch ($widget['default_keyword_sync']) {
    case VIDEO_UPLOAD_SYNC_APPEND :
      $keywords = $default_keywords;

      // Fall-through to add taxonomy.
    case VIDEO_UPLOAD_SYNC :
      $keywords = isset($keywords) ? array_merge($keywords, $video_taxonomy) : $video_taxonomy;
      break;
    case VIDEO_UPLOAD_SYNC_NONE :
    default :
      $keywords = $default_keywords;
  }

  // Hook to provider giving keyword array, provider must return a suitable value
  $keywords = $provider ? module_invoke('video_upload_provider_' . $provider, 'process', 'keywords', $keywords) : $keywords;
  return $keywords;
}

/**
 * Get taxonomy terms associated with node.
 * @param object $node
 * @return array
 *   Array of keywords.
 */
function _video_upload_get_formatted_taxonomy($node) {
  $video_taxonomy = array();

  if (empty($node->taxonomy)) {
    return array();
  }

  foreach ($node->taxonomy as $tid => $term) {
    $video_taxonomy[] = $term->name;
  }

  if (empty($video_taxonomy)) {
    return array();
  }

  return $video_taxonomy;
}


/**
 * Implementation of hook_cron().
 */
function video_upload_cron() {
  module_load_include('admin.inc', 'video_upload');

  // Find types containing a video_upload field.
  $fields = _video_upload_relevant_fields();

  // Verify videos.
  _video_upload_verify_all($fields);

  // Delete videos queued for deletion.
  _video_upload_delete_rejected_videos($fields);

  // Update provider info for all flagged videos.
  _video_upload_update_all_videos($fields);

  // Upload any pending videos.
  _video_upload_upload_all($fields);
}

/**
 * Implementation of hook_views_api().
 */
function video_upload_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'video_upload') . '/views',
  );
}

/**
 * Implementation of hook_field_settings_alter().
 *
 * For any fields using the video upload widget:
 * - Adds required database columns.
 * - Defines views data.
 */
function video_upload_field_settings_alter(&$data, $op, $field) {
  if (!isset($field['widget']) || $field['widget']['type'] != 'video_upload_widget') {
    return;
  }
  switch ($op) {
    case 'database columns':
      $data += array(
        // The provider ID.
        'video_id' => array(
          'type' => 'varchar',
          'length' => 32,
          'views' => TRUE,
        ),
        // Video status.
        'video_status' => array(
          'type' => 'varchar',
          'length' => 32,
          'sortable' => TRUE,
          'views' => TRUE,
        ),
        // Video provider.
        'video_provider' => array(
          'type' => 'varchar',
          'length' => 32,
          'default' => $field['widget']['provider']['type'],
          'views' => TRUE,
        ),      
        // Time of status update.
        'video_status_ts' => array(
          'type' => 'int',
          'length' => 11,
          'sortable' => TRUE,
          'default' => '0',
          'views' => TRUE,
        ),
      );
      break;

    case 'views data':
      $table_alias = content_views_tablename($field);
      $field_name = $field['field_name'];
      $data[$table_alias][$field_name . '_video_status']['filter']['handler'] = 'views_handler_filter_video_upload_status';
      $data[$table_alias][$field_name . '_video_status_ts']['filter']['handler'] = 'views_handler_filter_date';
      break;
  }
}

/**
 * Prepare a node and video to be sent to the configured provider. Also sets
 * the node status to unknown since once the video is sent, the status is
 * unknown until processing is complete.
 *
 * @param object $video
 *   A local video object.
 * @return boolean
 *   True if any videos were uploaded.
 */
function video_upload_upload($field, $video) {
  $node = node_load($video->nid);
  // Attach file information.
  $file = db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = %d", array(':fid' => $video->fid)));
  $video->filepath = $file->filepath;
  $video->filemime = $file->filemime;
  $result = _video_upload_provider_upload($video, $node, $field, $field['widget']['provider']['type']);
  if ($result['video_id']) {
    $video->video_id = $result['video_id'];
    $video->video_status = VIDEO_UPLOAD_STATUS_UNKNOWN;
    $video->video_status_ts = $_SERVER['REQUEST_TIME'];
    $update = TRUE;
    
    // Should we remove the file?
    if (variable_get('video_upload_remove_uploaded_files', FALSE)) {
      file_delete($file->filepath);
    }
  }

  return _video_upload_update_video($video);
}

/**
 * Call the provider's upload function and send the video.
 *
 * defines hook_upload()
 *
 * @param $node
 *   The associated video.
 * @param $video
 *   The filefield video array.
 */
function _video_upload_provider_upload($video, $node, $field, $provider) {
  return module_invoke("video_upload_provider_" . $provider, 'upload', $video, $node, $field);
}

/**
 * Connect to the provider.
 *
 * defines hook_connect()
 * 
 * @param mixed $http_client
 *   object http_client. If passed as boolean TRUE, the http_client will be
 *   generated.
 * @param string $provider 
 * @return video provider connection object
 */
function _video_upload_connect($http_client, $provider, $options = false) {
  if ($http_client === TRUE) {
    $http_client = _video_upload_authenticate(NULL, $provider, $options);
  }
  return module_invoke("video_upload_provider_" . $provider, 'connect', $http_client, $options);  
}

/**
 * Construct a video entry.
 *
 * defines hook_video_entry()
 *
 * @param string $provider
 * @return video entry object
 */
function _video_upload_video_entry($provider) {
  return module_invoke("video_upload_provider_" . $provider, 'video_entry');
}


/**
 * Authenticate to the provider.
 *
 * defines hook_authenticate()
 * 
 * @param boolean $reauthenticate
 * @param string $provider
 * @return authentication object
 */
function _video_upload_authenticate($reauthenticate = FALSE, $provider, $options = false) {
  static $authentication;
  if (!$authentication || $reauthenticate) {
    return module_invoke("video_upload_provider_" . $provider, 'authenticate', $options); 
  }
  return $authentication;
}

/**
 * Construct the upload manifest.
 *
 * defines hook_construct_media_group()
 * 
 * @param mixed &$connect
 * @param object &$video
 * @param mixed $node
 * @param mixed $field 
 * @param string $provider
 * @return video manifest
 */
function _video_upload_construct_media_group($connection, $video, $node, $field, $provider){
  return module_invoke("video_upload_provider_" . $provider, 'construct_media_group', $connection, $video, $node, $field);
}

/**
 * Get a token array, values for constructing the upload form
 *
 * defines hook_get_token_array()
 * 
 * @param mixed $connection
 * @param object $video
 * @param string $provider
 * @return array 
 *    form tokens for the upload
 */
function _video_upload_get_token_array($connection, $video, $provider) {
  return module_invoke("video_upload_provider_" . $provider, 'get_token_array', $connection, $video);
}

/**
 * Get a video's status
 *
 * defines hook_get_status()
 * 
 * @param mixed $connection
 * @param object $video
 * @param string $provider
 * @return object 
 *    status object
 */
function _video_upload_get_status($connection, $video, $provider) {
  return module_invoke("video_upload_provider_" . $provider, 'get_status', $video, $connection);
}

/**
 * Get a video's provider object based on an id
 *
 * defines hook_get_video_object()
 * 
 * @param mixed $connection
 * @param string $video_id
 * @param string $provider
 * @return object 
 *    Video metadata object
 */
function _video_upload_get_video_object($connection, $video_id, $provider) {
  return module_invoke("video_upload_provider_" . $provider, 'get_video_object', $video_id, $connection);
}

/**
 * Delete a video from the remote provider
 *
 * defines hook_delete_video_remote()
 *  
 * @param mixed $connection
 * @param object $video
 * @param mixed &$local_video 
 * @param mixed &$node  
 * @param string $provider
 * @return boolean 
 *    TRUE if successful update
 */
function _video_upload_delete_video_remote($connection, $video, $provider) {
  return module_invoke("video_upload_provider_" . $provider, 'delete_video_remote', $connection, $video);
}

/**
 * Get a feed from the provider
 * @param mixed $connection
 * @param array $params
 * @param string $provider
 * @return array 
 *    A video_upload formatted array of videos and related data
 */
function _video_upload_get_feed($connection, $params, $options, $provider) {
  return module_invoke("video_upload_provider_" . $provider, 'get_feed', $connection, $params, $options);
}

/**
 * Remove a video from the local database.
 */
function video_upload_delete_local($video) {
  if ($video->video_id) {
    // The video has been deleted, by removing the video ID it will evaluate as empty
    $video->video_id = '';
    return _video_upload_update_video($video);
  }
  watchdog('video_upload', 'Attempted to delete a video without an id.', array(), WATCHDOG_ERROR);
}

/**
 * Get available video statuses.
 */
function video_upload_get_all_statuses() {
  return array(
    VIDEO_UPLOAD_STATUS_ORPHANED => t('Orphaned'),
    VIDEO_UPLOAD_STATUS_DELETE => t('Queued for deletion'),
    VIDEO_UPLOAD_STATUS_BAD => t('Bad'),
    VIDEO_UPLOAD_STATUS_UNKNOWN => t('Unknown'),
    VIDEO_UPLOAD_STATUS_OK => t('Good'),
    VIDEO_UPLOAD_STATUS_OK_SYNCED => t('Good: Synced to provider'),
    VIDEO_UPLOAD_STATUS_UPLOAD_PENDING => t('Upload pending'),
    VIDEO_UPLOAD_STATUS_STILLFRAME => t('Good: Stillframe sync pending'),
  );
}

/**
 * Update a video upload node.
 */
function _video_upload_update_video($video) {
  $nid = $video->nid;

  if (module_exists('content_lock')) {
    if (content_lock_fetch_lock($nid)) {
      // Defer the node update, content is locked
      return false;
    }
  }
  
  // reset the node static cache - important for multiple status updates
  $node = node_load($nid, NULL, true);
  
  $field = $video->field;
  $field_name = $video->field['field_name'];
  $delta = isset($video->delta) ? $video->delta : 0;
  $node->{$field_name}[(int)$delta]['video_status_ts'] = $_SERVER['REQUEST_TIME'];
  $node->{$field_name}[(int)$delta]['video_status'] = $video->video_status;
  $node->{$field_name}[(int)$delta]['video_id'] = $video->video_id;
  $node->{$field_name}[(int)$delta]['video_provider'] = $video->field['provider'];

  if ($video->stillframe) {
    $stillframe_field = $video->field['widget']['stillframe_field'];  
  	$node->{$stillframe_field}[0]['fid'] = $video->stillframe->fid;
  	$node->{$stillframe_field}[0]['alt'] = $node->title . ' stillframe';
  	$node->{$stillframe_field}[0]['title'] = $node->title . ' stillframe';
  	$node->{$stillframe_field}[0]['filename'] = $video->stillframe->filename;
  	$node->{$stillframe_field}[0]['filepath'] = $video->stillframe->filepath;
  	$node->{$stillframe_field}[0]['filemime'] = $video->stillframe->filemime;						
  	$node->{$stillframe_field}[0]['filesize'] = $video->stillframe->filesize;  
  }

  // set a flag to skip node_load during CCK update hook
  $node->video_upload_processed = true;

  $node = node_submit($node);
  node_save($node);
  return $video->video_id;
}
  

function video_upload_stillframe($video_id, $provider) {
  $file = _video_upload_stillframe_pull($video_id, $provider);
  if ($file) {
    return _video_upload_stillframe_file_store($file);
  } else {
    return false;
  }
}

/**
 * Stores a stillframe to the files DB table
 */
function _video_upload_stillframe_file_store($file) {
  $file->fid =	db_result(db_query("SELECT fid FROM {files} WHERE filepath = '%s'", $file->filepath));
	if ($file->fid) {
    // we are updating the stillframe, flush cache and update filesize
    imagecache_image_flush($file->filepath); 
		drupal_write_record('files', $file, 'filesize');
	}
	else {
		drupal_write_record('files', $file);
	}
	return $file;
}

/**
 * Downloads a stillframe and returns a file asset
 */
function _video_upload_stillframe_pull($video_id, $provider) {
  $url = theme('video_upload_video_stillframe', $video_id, $provider);
  $response = drupal_http_request($url);
  if ( !isset($response->error) ) {
  	$filesize = strlen($response->data);
    // @todo set extension based on mime
  	$filename = $video_id .'.jpg';
    $dir = file_directory_path() . '/video_upload';
    if (!file_check_directory($dir, FILE_CREATE_DIRECTORY)) {
      $filepath = file_directory_path() . '/' . $filename;
    }
    else {
      $filepath =  $dir . '/' . $filename;
    }
  	
   	$saved_filepath = file_save_data($response->data, $filepath, FILE_EXISTS_REPLACE);
   	if ($saved_filepath) {
  		$file = new stdClass();
  		$file->filename = $filename;
  		$file->filepath = $saved_filepath;
  		$file->filemime = file_get_mimetype($file->filename);
  		$file->filesize = $filesize;
  		$file->timestamp = $_SERVER['REQUEST_TIME'];
  		$file->status = 1;
  		return $file;
   	}
	}
  return false;  
}
