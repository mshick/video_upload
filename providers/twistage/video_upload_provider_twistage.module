<?php

/**
 * @file Twistage service provider for video_upload
 */

require_once 'api_twistage.inc';

/**
 * The Twistage base url.
 */
define('VIDEO_UPLOAD_TWISTAGE_BASE_URL', 'http://service.twistage.com');

/**
 * The Twistage base video url.
 */
define('VIDEO_UPLOAD_TWISTAGE_VIDEO_URL', 'http://service.twistage.com/videos');

/**
 * The Twistage video preview url.
 */
define('VIDEO_UPLOAD_TWISTAGE_VIDEO_PREVIEW_URL', 'http://console.twistage.com/videos');

/**
 * The Twistage player swf url.
 */
define('VIDEO_UPLOAD_TWISTAGE_PLAYER_URL', 'http://service.twistage.com/plugins/player.swf');


/**
 * Implementation of hook_video_upload_provider_info().
 */
function video_upload_provider_twistage_video_upload_provider_info($op = 'widget') {
  switch($op) {
    case 'widget':
      return array(
        'video_upload_provider_twistage' => array(
          'label' => t('Upload/Edit/Display Video with Twistage'),
          'field types' => array('video_upload'),
          'multiple values' => CONTENT_HANDLE_CORE,
          'callbacks' => array(
            'default value' => CONTENT_CALLBACK_CUSTOM,
          ),
          // Description to use on forms to describe this widget.
          'description' => t('Upload video files to Twistage.'),
        ),
      );
    case 'info':
      return array( 'twistage' => array(
              'name' => 'Twistage',
              'description' => 'Allows video uploads and management with Twistage',
            ));
  }  
}  

function video_upload_provider_twistage_settings($op, $widget = array()) {
  switch($op) {
    case 'form':
      // Provider specific fieldset
      $form['provider'] = array(
        '#type' => 'fieldset',
        '#title' => t('Provider Options'),
        '#tree' => TRUE,
        '#collapsible' => TRUE,
      );
      // Video provider name / human readable
      $form['provider']['name'] = array(
        '#type' => 'hidden',
        '#value' => 'Twistage',
      );
      // Video provider type / machine readable - very important!      
      $form['provider']['type'] = array(
        '#type' => 'hidden',
        '#value' => 'twistage',
      );
            
      $form['provider']['stillframe_position'] = array(
        '#type' => 'textfield',
        '#title' => t('Stillframe Position'),
        '#required' => TRUE,     
        '#default_value' => $widget['provider']['stillframe_position'] ? $widget['provider']['stillframe_position'] : '5.0',
        '#description' => t('What time, in seconds, should stillframes be drawn from by default.'),
      );
      $form['provider']['ingest_profile'] = array(
        '#type' => 'textfield',
        '#title' => t('Ingest Profile'),        
        '#default_value' => $widget['provider']['ingest_profile'] ? $widget['provider']['ingest_profile'] : NULL,
        '#description' => t('The ingest profile to use. Site default will be used if not provided.'),
      );
      
      $form['display']['default_player_profile'] = array(
        '#type' => 'textfield',
        '#title' => t('Default Player Profile'),
        '#default_value' => $widget['display']['default_player_profile'] ? $widget['display']['default_player_profile'] : NULL,
        '#description' => t('The player profile to use on default players'),
      );
      $form['display']['small_player_profile'] = array(
        '#type' => 'textfield',
        '#title' => t('Small Player Profile'),
        '#default_value' => $widget['display']['small_player_profile'] ? $widget['display']['small_player_profile'] : NULL,
        '#description' => t('The player profile to use on small players'),
      );    
      return $form;
    
    case 'save':
      return array();
  }
}

/**
 * Twistage Authentication.
 * Just filing this in for compatibility - Twistage authenticates when it gets the object
 */
function video_upload_provider_twistage_authenticate($params = false) {
  if ($params) {
    $op = $params['op'] ? $params['op'] : NULL;
    $contributor = $params['contributor'] ? $params['contributor'] : NULL;
    $library_id = $params['library_id'] ? $params['library_id'] : NULL;
    if ($twistage = video_upload_provider_twistage_connect(NULL, $params)) {
      return _video_upload_twistage_get_authentication($twistage, $contributor, $op);
    }
  }
  return TRUE;
}

/**
 * Twistage Object.
 * @param $http_client (NULL, maintained for compatibility)
 */
function video_upload_provider_twistage_connect($http_client = NULL, $options = array()) {
  $library_id = $options['library_id'] ? $options['library_id'] : variable_get('video_upload_twistage_library_id', false);
  return _video_upload_twistage_api_twistage($library_id);
}

/**
 * Video Entry.
 * placeholder for now, don't need it.
 */
function video_upload_provider_twistage_video_entry() {
  global $user;
  
  $video = new stdClass();
  $video->contributor = $user->mail;
  return $video;
}

/**
 * Construct a media group.
 */
function video_upload_provider_twistage_construct_media_group($connect, $video, $node = false, $field) {
  $mediaGroup = new stdClass();
  $delta = $local_video->delta;

  // Set the title.
  $title = _video_upload_set_default_title($node, $field, $delta, 'twistage');
  $mediaGroup->title = $title;

  // Set the description.
  $description = _video_upload_set_default_description($node, $field, $delta, 'twistage');
  $mediaGroup->description = $description;

  // Set the tags.
  $keywords = _video_upload_get_video_keywords($node, $field, 'twistage');
  $mediaGroup->keywords = $keywords;
  
  // Set the stillframe position.
  $stillframe = $field['widget']['provider']['stillframe_position'];
  $mediaGroup->stillframe = $stillframe;
  
  if($field['widget']['publish_sync'] && $node){
    // Set the publish state
    $node_list = $node->status ? false : true;
    if ($video->hidden != $node_list) {
      // set video hidden state to match published state
      $update['hidden'] = $node_list ? 'true' : 'false';
    }  
  
    $mediaGroup->hidden = $node_list;
  }
  
  $video->mediaGroup = $mediaGroup;
  
  return $video;
}

/**
 * Twistage Token Array
 * @return array
 */
function video_upload_provider_twistage_get_token_array($connect, $video) {
  $auth_params['library_id'] = variable_get('video_upload_twistage_library_id', false);
  $auth_params['contributor'] = $video->contributor;
  $auth_params['op'] = 'ingest'; 
  if ($signature = video_upload_provider_twistage_authenticate($auth_params)) {
    $token_array['token'] = $signature;
    $params  = array(
      'title'           => $video->mediaGroup->title,
      'description'     => $video->mediaGroup->description,
      'stillframe'      => $video->mediaGroup->stillframe,
      'tag_list'        => $video->mediaGroup->keywords,
      'hidden'          => $video->mediaGroup->hidden,
      'redirect'          => url('video-upload/success/twistage', array('absolute' => TRUE)), 
    );
    $url = "http://service.twistage.com/upload_sessions/${signature}/http_open?" . http_build_query($params);;
    $response = drupal_http_request($url);
    $token_array['url'] = $response->data;
    return $token_array;
  }
}


/**
 * Implementation of hook_menu().
 */
function video_upload_provider_twistage_menu() {
  $items['admin/settings/video-upload/twistage'] = array(
    'title' => 'Twistage Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_video_upload_admin_twistage_settings_form'),
    'access arguments' => array('administer video upload settings'),
    'description' => 'Twistage video provider settings for the <em>Video Upload</em> module.',
    'type' => MENU_LOCAL_TASK,
  );

  $items['video-upload/post/twistage'] = array(
    'title' => 'Twistage post callback',
    'page callback' => 'video_upload_provider_twistage_browser_method_post',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 

  $items['video-upload/callback/twistage'] = array(
    'title' => 'Twistage post callback',
    'page callback' => '_video_upload_provider_twistage_hook',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

    
/**
 * Callback function for admin/settings/video_upload/twistage
 * @return
 *   Returns an array defining the admin settings form
 */
function _video_upload_admin_twistage_settings_form() {
  module_load_include('inc', 'video_upload', 'video_upload.admin');
  $form['#submit'][] = '_video_upload_admin_settings_form_submit';
  
  $form['twistage'] = array(
    '#type' => 'fieldset',
    '#title' => t('Twistage API Settings'),
  );
  $form['twistage']['video_upload_twistage_license_key'] = array(
    '#type' => 'textfield',
    '#title' => t('License Key'),
    '#description' => t('A Twistage License Key is required'),
    '#default_value' => variable_get('video_upload_twistage_license_key', false),
    '#required' => true,
  );
  $form['twistage']['video_upload_twistage_library_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Library'),
    '#description' => t('A Twistage library is required'),
    '#default_value' => variable_get('video_upload_twistage_library_id', false),
    '#required' => true,
  );
  $form['twistage']['video_upload_twistage_contributor'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Contributor'),
    '#description' => t('A default Twistage contributor is required'),
    '#default_value' => variable_get('video_upload_twistage_contributor', false),
    '#required' => true,
  );
  $form['twistage']['video_upload_twistage_company'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Company'),
    '#description' => t('A default Twistage company is required'),
    '#default_value' => variable_get('video_upload_twistage_company', false),
    '#required' => true,
  );
  $form['twistage']['video_upload_resync'] = array(
    '#type' => 'checkbox',
    '#title' => t('Resync !provider Videos', array('!provider' => 'Twistage')),
    '#description' => t('All synced videos from this provider will queued for resynchronization'),
    '#required' => false,
  );
  $form['twistage']['video_upload_provider'] = array(
    '#type' => 'hidden',
    '#default_value' => 'twistage',    
  );
  return system_settings_form($form);
}

// gets a service object if none set, and returns a signature
function _video_upload_twistage_get_authentication($twistage, $contributor, $op) {
  return _video_upload_twistage_api_authenticate($twistage, $contributor, $op);
}

/**
 * Implementation of hook_requirements()
 *
 * Checks for the existence required variable settings
 */

function video_upload_twistage_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break at install time.
  $t = get_t();

  // Get GData-specific requirements
  $twistage_requirements = _video_upload_twistage_api_requirements($phase);

  if ($phase == 'runtime') {

    $account_id      = variable_get('video_upload_twistage_company', false);
    $library_id     = variable_get('video_upload_twistage_library_id', false);
    $license_key = variable_get('video_upload_twistage_license_key', false);

    // must have certain settings to use
    if (!$account_id) {
      $requirements['video_upload_twistage_account_id'] = array(
        'title' => $t('Video Upload: Twistage Account ID '),
        'value' => $t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The Video Upload module requires at least one Twistage account id, which can be set <a href="!url">here</a>.', array('!url' => url('admin/settings/video-upload/twistage'))),
      );
    }
    if (!$library_id) {
      $requirements['video_upload_twistage_library_id'] = array(
        'title' => $t('Video Upload: Twistage Library ID'),
        'value' => $t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The Video Upload module requires at least one Twistage Library ID, which can be set <a href="!url">here</a>.', array('!url' => url('admin/settings/video-upload/twistage'))),
      );
    }
    if (!$license_key) {
      $requirements['video_upload_twistage_license_key'] = array(
        'title' => $t('Video Upload: Twistage License Key'),
        'value' => $t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The Video Upload module requires a Twistage license key, which can be set <a href="!url">here</a>.', array('!url' => url('admin/settings/video-upload/twistage'))),
      );
    }

    if ($account_id && $library_id && $license_key && !_video_upload_twistage_service_object()) {
      // failed to connect/authenticate
      $requirements['video_upload_twistage_authentication'] = array(
        'title' => $t('Video Upload: Twistage Authentication'),
        'value' => $t('Failed'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The Video Upload module has the required information, but was unable to authenticate to Twistage. There may be an error in one or more of the following: !list These settings can be reviewed <a href="!url">here</a>.', array('!list' => theme('item_list', array('account_id', 'library_id', 'license_key')), '!url' => url('admin/settings/video-upload/twistage'))),
      );
    }
  }

  return array_merge($requirements, $twistage_requirements);
}

function video_upload_provider_twistage_success() {
  // Twistage requires us to close the post to get back the VID.
  $response = _video_upload_provider_twistage_close_post();
  if (isset($response)) {
    $value = array('video_id' => $response->data,
                   'video_status' => 'unknown',
                   'video_provider' => 'twistage',   
                   'error' => FALSE );
    return $value;
  }
  else {
    return false;
  }
}

function video_upload_provider_twistage_browser_method_upload_form($token_array) {
  $form['#action'] = $token_array['url'];
 
  // Twistage upload token.
  $form['token'] = array(
    '#type' => 'hidden',
    '#name' => 'token',
    '#value' => $token_array['token'],
  );

  return $form;
}

function _video_upload_provider_twistage_close_post() {
  $signature = $_GET['_ingest_signature'];
  $request_url = "http://service.twistage.com/upload_sessions/${signature}/http_close";
  return drupal_http_request($request_url); 
}

/**
 * Implementation of hook_theme().
 */
function video_upload_provider_twistage_theme() {
  $theme = array(
    'video_upload_provider_twistage_video' => array(
      'arguments' => array('twistage_id' => NULL, 'width' => NULL, 'height' => NULL, 'field' => array(), 'params' => array(), 'attributes' => array(), 'profile' => NULL)
    ),
    'video_upload_provider_twistage_video_thumb' => array(
      'arguments' => array('twistage_id' => NULL, 'flag' => ''),
    ),    
    'video_upload_provider_twistage_video_link' => array(
      'arguments' => array('twistage_id' => NULL),
    ),
    'video_upload_provider_twistage_video_stillframe' => array(
      'arguments' => array('twistage_id' => NULL),
    ), 
    'video_upload_provider_twistage_widget_notice' => array(
      'arguments' => array(),
    ), 
    'video_upload_provider_twistage_player_url' => array(
      'arguments' => array('twistage_id' => NULL),
    ),            
  );
  return $theme;
}

function theme_video_upload_provider_twistage_widget_notice() {

  return '<div class="notice">'. t('You have 5 minutes to upload your video') . '</div>';
}

/**
 * Theme a Twistage video
 */
function theme_video_upload_provider_twistage_video($twistage_id, $width, $height, $field, $params, $attributes, $formatter = false) {
  if ($field) {
    $display = $field['widget']['display'];
  }
  $video_url = VIDEO_UPLOAD_TWISTAGE_PLAYER_URL;
  $query = array();
  $query['v'] = $twistage_id;

  if ($display['autoplay']) {
    // autoplay
    $query['autoplay'] = 'true';
  }
  else {
    $query['autoplay'] = 'false';
  }
  
  if ($formatter && $display) {
    $query['p'] = $display[$formatter . '_player_profile']; 
  }
  else if ($display) {
    $query['p'] = $display['default_player_profile'];   
  }
  
  $flashvars = http_build_query($query, '', '&');

  $default_params = array(
    'movie' => $video_url,
    'base' => VIDEO_UPLOAD_TWISTAGE_BASE_URL,
    'wmode' => 'transparent',
    'bgcolor' => '#FFFFFF',
    'allowscriptaccess' => 'always',
    'allowfullscreen' => 'true',
    'flashvars' => $flashvars,
  );
  
  
  $all_params = $params ? array_merge($default_params, $params) : $default_params;
  foreach ($all_params as $p_name => $p_value) {
    $parameters .= '
    <param name="' . $p_name . '" value="' . $p_value .'" />
';
  }

  static $v = 1;
  $default_attributes = array(
    'type' => 'application/x-shockwave-flash',
    'height' => $height,
    'width' => $width,
    'data' => $video_url,
    'id' => 'videoEmbedTwistage' . $v,
    'name' => 'videoEmbedTwistage',
  );
  $v ++;

  $flash_attributes = $attributes ? array_merge($default_attributes, $attributes) : $default_attributes;

  $output = '<object ' . drupal_attributes($flash_attributes) . '>' . $parameters . '</object>';
  return $output;  
}

/**
 * Theme a Twistage thumb
 */
function theme_video_upload_provider_twistage_video_thumb($twistage_id, $flag) {
  $attributes['src'] = VIDEO_UPLOAD_TWISTAGE_VIDEO_URL . '/' . $twistage_id . '/screenshots/120w90h.jpg' . $flag;
  $attributes['alt'] = t('Twistage Thumbnail');
  return $attributes;
}

/**
 * Theme a Twistage link
 */
function theme_video_upload_provider_twistage_video_link($twistage_id) {
  return url(VIDEO_UPLOAD_TWISTAGE_VIDEO_PREVIEW_URL . '/' . $twistage_id);
}

/**
 * Theme a Twistage player url
 */
function theme_video_upload_provider_twistage_player_url($twistage_id) {
  return url(VIDEO_UPLOAD_TWISTAGE_PLAYER_URL . '?v=' . $twistage_id);
}

/**
 * Theme a Twistage stillframe URL
 */
function theme_video_upload_provider_twistage_video_stillframe($twistage_id) {
  return url(VIDEO_UPLOAD_TWISTAGE_VIDEO_URL . '/' . $twistage_id . '/screenshots/original.jpg');
}


function video_upload_provider_twistage_get_status($vid, $connection) {
  $video = (gettype($vid) == 'string') ? video_upload_provider_twistage_get_video_object($vid, $connection) : $video;
  return _video_upload_provider_twistage_get_video_status($video);
}

function video_upload_provider_twistage_verify_all($videos) {
  // Establish provider connection.
  $connection = video_upload_provider_twistage_connect();
  foreach($videos as $video_id => $local_video) {
    $video = video_upload_provider_twistage_get_video_object($video_id, $connection);
    $status = _video_upload_provider_twistage_get_video_status($video);
    if ($status->status === VIDEO_UPLOAD_STATUS_BAD || $status->status === VIDEO_UPLOAD_STATUS_DELETE) {
      // The video is bad, the node should be deleted, or unpublished, or
      // perhaps the user should be notified Setting status to 'bad' queues
      // the video for deletion.
      
      watchdog('video_upload', t('Video Upload: There was a problem while attempting access video id @id.', array('@id' => $video_id)), WATCHDOG_ERROR);   
            
      $local_video->video_status = VIDEO_UPLOAD_STATUS_BAD;
      _video_upload_update_video($local_video);
    }
    elseif ($status->status === VIDEO_UPLOAD_STATUS_OK) {
      // The video is good, update the table.
      $node = node_load($local_video->nid);
      // Update Twistage if applicable.
      _video_upload_provider_twistage_update_video_remote($connection, $video, $local_video, $node);

      // Initial update will download the stillframe
      if (!empty($local_video->field['widget']['stillframe_field'])) {
        // Get the Twistage stillframe file
        $stillframe = video_upload_stillframe($video_id, 'twistage');
        if ($stillframe) {
          $local_video->stillframe = $stillframe;
        } else {
          // If we don't have it, set the flag to try again
          $local_video->video_status = VIDEO_UPLOAD_STATUS_STILLFRAME;
        }
      }

      // The video is good, update the table.
      _video_upload_update_video($local_video);

      // @TODO Notify the author, or expose this to trigger/action functionality.
    }
    else {
      // Nothing found on the video, wait until next time.
    }    

  }

}

/**
 * Get a Twistage video metadata object by id
 * Implementation of hook_get_video_object(). 
 */
function video_upload_provider_twistage_get_video_object($twistage_id, $connection) {
  if ($connection) {
    if ($video = _video_upload_provider_twistage_get_video_object_by_id($twistage_id, $connection)) {
      return $video;
    }
  }
  return false;
}

function _video_upload_provider_twistage_get_video_object_by_id($twistage_id, $connection) {
  if ($connection) {
    return _video_upload_twistage_api_get_metadata($twistage_id, $connection);
  }
  return false;
}

function _video_upload_provider_twistage_get_video_status($video) {
  $status = new stdClass();
  $state = $video->status ? $video->status : 'errored';
  switch ($state) {
    case 'available':
      $status->status = VIDEO_UPLOAD_STATUS_OK;
      break;

    case 'hidden':
      $status->status = VIDEO_UPLOAD_STATUS_OK;
      break;

    case 'inprogress':
      $status->status = VIDEO_UPLOAD_STATUS_UNKNOWN;
      break;

    case 'errored':
      $status->status = VIDEO_UPLOAD_STATUS_BAD;
      break;

    case 'trash':
      $status->status = VIDEO_UPLOAD_STATUS_DELETE;
      break;

    default:
      $status->status = VIDEO_UPLOAD_STATUS_UNKNOWN;
  }
  return $status;
}


/**
 * Syncronize Twistage fields with node
 */
function _video_upload_provider_twistage_update_video_remote($connection, $video, &$local_video, &$node) {
  $update = FALSE;
  $field = $local_video->field;
  $delta = $local_video->delta;

  $update = _video_upload_provider_twistage_build_update_array($video, $node, $field, $delta);

  if ($update) {
    // the video has been updated, send changes to Twistage
    if (_video_upload_twistage_api_update_video($video->video_id, $connection, $update)) {
      // set status to synced to indicate an update has occurred
      $local_video->video_status = VIDEO_UPLOAD_STATUS_OK_SYNCED;
    }
  }
  else {
    // our video must be synced if we didn't need to update it
    $local_video->video_status = VIDEO_UPLOAD_STATUS_OK_SYNCED;
  }
}

/**
 * Build the update array for Twistage
 * only generated if something has changed so compare video to node
 */
function _video_upload_provider_twistage_build_update_array($video, $node, $field, $delta = 0) {
  // fill in standard fields
  $title = _video_upload_set_default_title($node, $field, $delta, 'twistage');
  if ($video->title != $title) {
    // set video title
    $update['title'] = $title;
  }

  // Set keywords based on taxonomy.
  $keywords = array_filter(explode(',', _video_upload_get_video_keywords($node, $field, 'twistage')));
  $video_tags = array();
  $video->tags = isset($video->tags) ? $video->tags : array();
  foreach ($video->tags as $key => $tag) {
    array_push($video_tags, $tag->name);
  }
  if (count(array_diff($keywords, $video_tags)) || count(array_diff($video_tags, $keywords))) {
    $update['tag_list'] = trim(implode(',', $keywords), ',');
  }

  $description = _video_upload_set_default_description($node, $field, $delta, 'twistage');
  if ($video->description != $description) {
    // set video title
    $update['description'] = $description;
  }
  
  $user = user_load($node->uid);
  $author = $user->name;
  if ($video->artist != $author) {
    // set video author to user name
    $update['artist'] = $author;
  }

  if ($field['widget']['publish_sync']) {
    $node_list = $node->status ? false : true;
    if ($video->hidden != $node_list) {
      // set video hidden state to match published state
      $update['hidden'] = $node_list ? 'true' : 'false';
    }  
  }
  
  // move the video to the proper library  
  if ($video->library_name != variable_get('video_upload_twistage_library_id', false)) {
    $update['library_id'] = variable_get('video_upload_twistage_library_id', false);
  }

  // fill in custom fields 
  foreach($video->custom_fields as $key => $custom_field) {
    $custom_fields[$custom_field->name] = $custom_field->value;  
  }

  $sitemap_url = url('node/'. $node->nid, array('absolute' => true));
  if ($custom_fields['sitemap-url'] != $sitemap_url) {
    $update['custom_fields']['sitemap-url'] = $sitemap_url;
  }

  // set a sitemap url  
  if ($video->sitemap_url != variable_get('video_upload_twistage_library_id', false)) {
    $update['library_id'] = variable_get('video_upload_twistage_library_id', false);
  }

  return $update;
}

function video_upload_provider_twistage_update_all($videos) {
  // Establish provider connection.
  $connection = video_upload_provider_twistage_connect(TRUE);

  foreach($videos as $video_id => $local_video) {
    // Get the remote video object
    $video = video_upload_provider_twistage_get_video_object($video_id, $connection);
    $status = _video_upload_provider_twistage_get_video_status($video);
    if ($status->status === VIDEO_UPLOAD_STATUS_BAD || $status->status === VIDEO_UPLOAD_STATUS_DELETE) {
      // The video is bad, the node should be deleted, or unpublished, or
      // perhaps the user should be notified Setting status to 'bad' queues
      // the video for deletion.
 
      watchdog('video_upload', t('Video Upload: There was a problem while attempting access video id @id.', array('@id' => $video_id)), WATCHDOG_ERROR);    
 
      $local_video->video_status = VIDEO_UPLOAD_STATUS_BAD;
      _video_upload_update_video($local_video);
    }
    elseif($status->status === VIDEO_UPLOAD_STATUS_OK) {
      // Load the node in question.
      $node = node_load($local_video->nid);
  
      // Update Twistage if applicable.
      _video_upload_provider_twistage_update_video_remote($connection, $video, $local_video, $node);
      
      if ($local_video->sync === VIDEO_UPLOAD_STATUS_STILLFRAME) {
        // Get the Twistage stillframe file
        $stillframe = video_upload_stillframe($video_id, 'twistage');
        if ($stillframe) {
          $local_video->stillframe = $stillframe;
        } else {
          // If we don't have it, set the flag to try again
          $local_video->video_status = VIDEO_UPLOAD_STATUS_STILLFRAME;
        }        
      }

      // The video may have been updated, thus the status may have changed.
      _video_upload_update_video($local_video);
    }
    else {
      // Nothing found about the video, wait until next time.    
    }
  }
}


function video_upload_provider_twistage_delete_rejected_videos($videos) {
  // Establish provider connection.
  $connection = video_upload_provider_twistage_connect(TRUE);

  foreach($videos as $video_id => $local_video) {
    // Get the remote video object
    $video = video_upload_provider_twistage_get_video_object($video_id, $connection);

    if($video) {
      $status = _video_upload_provider_twistage_get_video_status($video);
      if ($status->status != VIDEO_UPLOAD_STATUS_DELETE) {
        // Delete the video from the provider.
        video_upload_provider_twistage_delete_video_remote($connection, $video);
      }
    }
    // Remove record from local table.
    video_upload_delete_local($local_video);    
  }
}

/**
 * Remove a video from Twistage
 */
function video_upload_provider_twistage_delete_video_remote($connection, $video) {
  if ($connection) {
    return _video_upload_twistage_api_delete_video($connection, $video);
  }
  return false;
}

/**
 * Perform the file upload.
 * @todo make this work
 */
function video_upload_provider_twistage_upload($video, $node, $field) {
  $connection = video_upload_provider_twistage_connect();
  if (!$connection) {
    return FALSE;
  }

  $user = user_load($node->uid);
  $contributor = $user->mail;

  $twistage_video = new stdClass();
  $twistage_video->contributor = $contributor;

  $twistage_video->update = _video_upload_provider_twistage_build_update_array($video, $node, $field);

  // Attach the file.
  _video_upload_provider_twistage_attach_video($twistage_video, $video);

  // Send the video.
  return _video_upload_provider_twistage_insert_video($connection, $twistage_video);
}

/**
 * Attach the file for upload.
 */
function _video_upload_provider_twistage_attach_video(&$twistage_video, $video) {
  $twistage_video = (object)array_merge_recursive((array)$video, (array)$twistage_video);
}

function _video_upload_provider_twistage_insert_video($connection, $video) {
  $result['video_id'] = _video_upload_twistage_api_insert_video($connection, $video);
  return $result;
}

/**
 * Implementation of hook_get_feed().
 */
function video_upload_provider_twistage_get_feed($connection, $params = array(), $options) {
  // get the raw Twistage video feed
  $feed_raw = _video_upload_twistage_api_search_videos($connection, $params['page'], $params['per_page'], $params['search']);

  // conform the returned feed to video_upload convention
  $feed = array();
  $feed['pages'] = $feed_raw->page_info->page_count;
  foreach ($feed_raw->videos as $item) {
      $video = new stdClass();
      $video->video_id = $item->video_id;
      $video->title = $item->title;
      $video->provider = 'twistage';
      $feed['videos'][] = $video;
  }

  return $feed;
}


/**
 * Implementation of hook_process();
 * @param string $op
 * @param mixed $value
 * 
 * @return mixed
 */
function video_upload_provider_twistage_process($op, $value) {
  switch ($op) {
    case 'title':
      return $value;
    
    case 'description':
      // No tags allowed. 5000 char count
      return truncate_utf8(strip_tags($value), 5000, TRUE, TRUE);
      
    case 'keywords':
      if (is_array($value)) {
        $keywords = implode(',', $value);
      }
    
      return $keywords;   

    default:
      return;
  }
}

function _video_upload_provider_twistage_hook() {
  if ($_REQUEST['action'] == 'ready') {
    // if a video has become ready trigger the cron to update it
    // @todo would be better to just update the affected video
    video_upload_cron();
  }
}

/**
 * Menu callback for upload progress.
 */
function video_upload_provider_twistage_progress($key) {
  $progress = array(
    'message' => t('Starting upload...'),
    'percentage' => -1,
  );

  $status = _video_upload_provider_twistage_progress_fetch($key);
  if (isset($status['current'])) {
    $progress['message'] = t('Uploading... ');
    $progress['percentage'] = round($status['current']);
  }
  return $progress;
}

function _video_upload_provider_twistage_progress_fetch($key) {
  $ret = drupal_http_request('http://service.twistage.com/upload_sessions/' . $key . '/progress');
  $status['current'] = $ret->data;
  return $status;
}

